#!/bin/sh

# - Syncs mail for all accounts, or a single account given as an argument.
# - Displays a notification showing the number of new mails.
# - Displays a notification for each new mail with its subject displayed.
# - Runs notmuch to index new mail.
# - This script can be set up as a cron job for automated mail syncing.

# There are many arbitrary and ugly features in this script because it is
# inherently difficult to pass environmental variables to cronjobs and other
# issues. It also should at least be compatible with Linux (and maybe BSD) with
# Xorg and MacOS as well.

# log output
if [ ! -t 2 ]; then
	exec 2>"$HOME/.local/log/mailsync/log"
fi

# Run only if user logged in (prevent cron errors)
pgrep -u "${USER:=$LOGNAME}" >/dev/null || { echo "$USER not logged in; sync will not run."; exit ;}
# Run only if not already running in other instance
pidof -s mbsync >/dev/null && { echo "mbsync is already running." ; exit ;}

# Include scripts in PATH
PATH="$HOME/.local/bin/scripts:$PATH"

# Checks for internet connection and set notification script.
ping -q -c 1 1.1.1.1 > /dev/null || ping -q -c 1 1.0.0.1 > /dev/null || ping -q -c 1 example.org || { echo "No internet connection detected."; exit ;}
command -v notify-send >/dev/null || echo "Note that \`libnotify\` or \`libnotify-send\` should be installed for pop-up mail notifications with this script."

# Required to display notifications if run as a cronjob:
. ${XDG_RUNTIME_DIR:-/run/user/$(id -u)}/session-env

# set mbsync config file
[ -n "$MBSYNCRC" ] && alias mbsync="mbsync -c $MBSYNCRC" || MBSYNCRC="$HOME/.config/mbsync/mbsyncrc"

case "$(readlink -f /sbin/init)" in
	*systemd*) export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus ;;
esac
export GPG_TTY=$TTY

# For individual configurations:
[ -d "$HOME/.local/share/password-store" ] && export PASSWORD_STORE_DIR="${PASSWORD_STORE_DIR:-$HOME/.local/share/password-store}"
[ -d "$HOME/.local/share/gnupg" ] && export GNUPGHOME="${GNUPGHOME:-$HOME/.local/share/gnupg}"

# Settings are different for MacOS (Darwin) systems.
case "$(uname)" in
	Darwin)
		notify() { osascript -e "display notification \"$2 in $1\" with title \"You've got Mail\" subtitle \"Account: $account\"" && sleep 2 ;}
		messageinfo() { osascript -e "display notification with title \"ðŸ“§ $from\" subtitle \"$subject\"" ;}
		;;
	*)
		# remember if a display server is running since `ps` doesn't always contain a display
		pgrepoutput="$(pgrep -a X\(org\|wayland\))"
		displays="$(echo "$pgrepoutput" | grep -wo "[0-9]*:[0-9]\+" | sort -u)"
		notify() { [ -n "$pgrepoutput" ] && for x in ${displays:-0:}; do
				export DISPLAY=$x
				notify-send --app-name="mutt-wizard" "mutt-wizard" "ðŸ“¬ $2 new mail(s) in \`$1\` account."
			done ;}
		messageinfo() { [ -n "$pgrepoutput" ] && for x in ${displays:-0:}; do
				export DISPLAY=$x
				notify-send --app-name="mutt-wizard" "ðŸ“§$from:" "$subject"
			done ;}
		;;
esac

# Check account for new mail. Notify if there is new content.
syncandnotify() {
	acc="$(echo "$account" | sed "s/.*\///")"
	if [ -z "$opts" ]; then mbsync "$acc"; else mbsync "$opts" "$acc"; fi
	#new=$(find "$HOME/.local/share/mail/$acc/INBOX/new/" "$HOME/.local/share/mail/$acc/Inbox/new/" "$HOME/.local/share/mail/$acc/inbox/new/" -type f -newer "${XDG_CACHE_HOME:-$HOME/.cache}/mailsynclastrun" 2> /dev/null)
	#new=$(find "$HOME"/.local/share/mail/"$acc"/*/new/ -type f -newer "${XDG_CACHE_HOME:-$HOME/.cache}/mailsynclastrun" 2>/dev/null)
	new=$(find "$HOME"/.local/share/mail/"$acc" -type f -not -path '**/Trash/*' -not -path '**/Junk/*' -not -path '**/Drafts/*' -not -path '**/*.Drafts/*' \( -path '**/cur/*' -regex '.*:2,[A-RT-Z]*' -or -path '**/new/*' \) -newer "${XDG_CACHE_HOME:-$HOME/.cache}/mailsynclastrun")
	newcount=$(echo "$new" | sed '/^\s*$/d' | wc -l)
	if [ "$newcount" -gt "0" ]; then
		notify "$acc" "$newcount" &
		for file in $new; do
			# Extract subject and sender from mail.
			from=$(awk '/^From: / && ++n ==1,/^\<.*\>:/' "$file" | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | awk '{ $1=""; if (NF>=3)$NF=""; print $0 }' | sed 's/^[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//')
			subject=$(awk '/^Subject: / && ++n == 1,/^\<.*\>: / && ++i == 2' "$file" | head -n 1 | perl -CS -MEncode -ne 'print decode("MIME-Header", $_)' | sed 's/^Subject: //' | sed 's/^{[[:blank:]]*[\"'\''\<]*//;s/[\"'\''\>]*[[:blank:]]*$//' | tr -d '\n')
		messageinfo &
		done
	fi
}

# Sync accounts passed as argument or all.
if [ "$#" -eq "0" ]; then
	accounts="$(awk '/^Channel/ {print $2}' "$MBSYNCRC")"
else
	for arg in "$@"; do
		[ "${arg%${arg#?}}" = '-' ] && opts="${opts:+${opts} }${arg}" && shift 1
	done
	accounts=$*
fi

# Parallelize multiple accounts
for account in $accounts; do
	syncandnotify &
done

wait

#notmuch new 2>/dev/null

#Create a touch file that indicates the time of the last run of mailsync
touch "${XDG_CACHE_HOME:-$HOME/.cache}/mailsynclastrun"
