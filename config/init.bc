#!/usr/bin/bc -l

#
# bc(1) init script
#

# define pi
pi = 4 * a(1)

# factorial function
define fact(x) {
	if (x <= 1)
		return (1)
	
	return (x * fact(x-1))
}

# logarithm function with a specified base
define log(base, n) {
	return (l(n) / l(base))
}

# arithmetic sequence
define aseq(a1, d, n) {
	return (a1 + d * (n-1))
}

# partial sum of arithmetic sequence
define apsum(a1, difference, n1, n2) {
	auto sum

	for (i = n1; i <= n2; i++)
		sum += aseq(a1, difference, i)

	return (sum)
}

# geometric sequence
define gseq(a1, r, n) {
	return (a1 * r ^ (n - 1))
}

# partial sum of geometric sequence
define gpsum(a1, r, n) {
	return ( a1 * ((1 - r ^ (n-1)) / (1 - r)) )
}

# Temperature converters
define f2c(f) { return ((f - 32) / 1.8) }
define c2f(c) { return (c * 1.8 + 32) }

# Combination
define c(n, r) {
	return (fact(n) / (fact(r) * fact(n - r)))
}

# Cube root (not completely accurate)
define root3(x) {
	return (e(l(x)/3))
}

# Pascal's triangle
define pascal(n) {
	auto i, j, c, z, os
	os = scale
	scale = 0
	for (i = 0; i <= n; i++) {
		for (j = 0; j < (2 - length(i)); j++) {
			print " "
		}
		print i, ": "
		for (j = 0; j <= i; j++) {
			c = c(i, j)
			for (z = 0; z < (3 - length(c)); z++) {
				print " "
			}
			print c, " "
		}
		print "\n"
	}
	scale = os
	return
}

# Degrees to radians
define d2r(d) {
	return d * (pi / 180)
}

# Radians to degrees
define r2d(r) {
	return r * (180 / pi)
}
