# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTFILE=~/.local/share/shell_history
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar
shopt -s extglob

# Enable vi-style line editing
#set -o vi

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${arch_chroot:-}" ] && [ -r /etc/arch_chroot ]; then
    arch_chroot=$(cat /etc/arch_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    *linux|screen|xterm|xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = "yes" ]; then
	case "$TERM" in
		st*)
			set_ps1() {
				LCS=$?
				if [ $LCS = 0 ]; then
					STATUS_TEXT=''
				else
					STATUS_TEXT='\[\033[00m\] : \[\033[01;31m\]$LCS\[\033[00m\]'
				fi
				if git rev-parse >/dev/null 2>&1; then
					branch="$(git branch --show-current)"
					state="$(git status -sb | grep -o '\[.*\]' | sed 's/\[\|\]//g' | awk '{if($1=="ahead")ahead=$2;if($1=="behind")behind=$2;if($3=="ahead")ahead=$4;if($3==behind)behind=$4;printf " ↑%d ↓%d", ahead, behind}' | sed 's/ [↑↓]0//g; s/↑[0-9]\+/\x1b[32m&/; s/↓[0-9]\+/\x1b[31m&/')"
					gittext=$(printf " \[\e[00m\]: \[\e[01;35m\] \[\e[01;35m\]%s%s" "$branch" "$state")
				else
					gittext=""
				fi
				PS1="\[\033[01;34m\]\w$gittext$STATUS_TEXT \[\033[00;01m\]\$\[\033[00m\] "
			}
			PROMPT_COMMAND=set_ps1
			;;
		*)
			set_ps1() {
				LCS=$?
				if [ $LCS = 0 ]; then
					STATUS_TEXT=''
				else
					STATUS_TEXT='\[\033[00m\] : \[\033[01;31m\]$LCS\[\033[00m\]'
				fi
				if git rev-parse >/dev/null 2>&1; then
					branch="$(git branch --show-current)"
					state="$(git status -sb | grep -o '\[.*\]' | sed 's/\[\|\]//g' | awk '{if($1=="ahead")ahead=$2;if($1=="behind")behind=$2;if($3=="ahead")ahead=$4;if($3==behind)behind=$4;printf " ↑%d ↓%d", ahead, behind}' | sed 's/ [↑↓]0//g; s/↑[0-9]\+/\x1b[32m&/; s/↓[0-9]\+/\x1b[31m&/')"
					gittext=$(printf " \[\e[00m\]: \[\e[01;35m\] \[\e[01;35m\]%s%s" "$branch" "$state")
				else
					gittext=""
				fi
				PS1="\[\033[01;33m\]\u: \[\033[01;34m\]\w\[\033[00m\]$gittext$STATUS_TEXT\[\033[01;34m\] \$\[\033[00m\] "
			}
			PROMPT_COMMAND=set_ps1
			;;
	esac
	if [ $EUID -eq 0 ]; then
				set_ps1() {
					LCS=$?
					if [ $LCS = 0 ]; then
						STATUS_TEXT=''
					else
						STATUS_TEXT='\[\033[00m\] : \[\033[01;31m\]$LCS\[\033[00m\]'
					fi
					if git rev-parse >/dev/null 2>&1; then
						branch="$(git branch --show-current)"
						state="$(git status -sb | grep -o '\[.*\]' | sed 's/\[\|\]//g' | awk '{if($1=="ahead")ahead=$2;if($1=="behind")behind=$2;if($3=="ahead")ahead=$4;if($3==behind)behind=$4;printf " ↑%d ↓%d", ahead, behind}' | sed 's/ [↑↓]0//g; s/↑[0-9]\+/\x1b[32m&/; s/↓[0-9]\+/\x1b[31m&/')"
						gittext=$(printf " \[\e[00m\]: \[\e[01;35m\] \[\e[01;35m\]%s%s" "$branch" "$state")
					else
						gittext=""
					fi
					PS1="\[\033[01;33m\]ROOT: \[\033[01;34m\]\w\[\033[00m\]$gittext$STATUS_TEXT\[\033[00;01m\] #\[\033[00m\] "
				}
				PROMPT_COMMAND=set_ps1
	fi
else
	if [ $EUID -ne 0 ]; then
		PS1='\u: \w \$ '
	else
		PS1='ROOT: \w \$ '
	fi
fi
unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
	alias tree='tree -C'
    alias less='less -r'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
alias_file=~/.config/aliases
[ -f $alias_file ] && . $alias_file

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Fix pinentry
export GPG_TTY=$(tty)

# Shortcuts
shortcutsdir=~/.config/shortcuts
tmpfile=$(mktemp)
# directories
grep -v '#' $shortcutsdir/dirs | awk '{print "alias "$1"=\"cd "$2" && la\""}' > $tmpfile
#files
grep -v '#' $shortcutsdir/files | awk '{print "alias "$1"=\"vim "$2"\""}' >> $tmpfile
. $tmpfile
\rm $tmpfile

# Enable cd'ing by just typing the directory name
shopt -s autocd

# Command not found helper
source /usr/share/doc/pkgfile/command-not-found.bash

# Open help for current command using Alt-H
function run-help() {
	help "$READLINE_LINE" 2>/dev/null || man "$READLINE_LINE";
}
bind -m vi-insert -x '"\eh": run-help'

if ! tty | grep "not a tty" >/dev/null; then
	pfetch
fi
